// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mirabuiltin.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from mirabuiltin.proto</summary>
public static partial class MirabuiltinReflection {

  #region Descriptor
  /// <summary>File descriptor for mirabuiltin.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MirabuiltinReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFtaXJhYnVpbHRpbi5wcm90byJOCglQYk1lc3NhZ2USIgoIY2F0ZWdvcnkY",
          "ASABKA4yEC5NZXNzYWdlQ2F0ZWdvcnkSDAoEdHlwZRgCIAEoDRIPCgdwYXls",
          "b2FkGAMgASgMKlcKD01lc3NhZ2VDYXRlZ29yeRIICgROT05FEAASCgoGU1lT",
          "VEVNEAESBwoDTE9HEAISCQoFREVCVUcQAxIICgRGSUxFEAQSBwoDQ01EEAUS",
          "BwoDTUFYEAYqnwoKBkVycm9ycxIHCgNFT0sQABIJCgVFUEVSTRABEgoKBkVO",
          "T0VOVBACEgkKBUVTUkNIEAMSCQoFRUlOVFIQBBIHCgNFSU8QBRIJCgVFTlhJ",
          "TxAGEgkKBUUyQklHEAcSCwoHRU5PRVhFQxAIEgkKBUVCQURGEAkSCgoGRUNI",
          "SUxEEAoSCwoHRURFQURMSxALEgoKBkVOT01FTRAMEgoKBkVBQ0NFUxANEgoK",
          "BkVGQVVMVBAOEgsKB0VOT1RCTEsQDxIJCgVFQlVTWRAQEgoKBkVFWElTVBAR",
          "EgkKBUVYREVWEBISCgoGRU5PREVWEBMSCwoHRU5PVERJUhAUEgoKBkVJU0RJ",
          "UhAVEgoKBkVJTlZBTBAWEgoKBkVORklMRRAXEgoKBkVNRklMRRAYEgoKBkVO",
          "T1RUWRAZEgsKB0VUWFRCU1kQGhIJCgVFRkJJRxAbEgoKBkVOT1NQQxAcEgoK",
          "BkVTUElQRRAdEgkKBUVST0ZTEB4SCgoGRU1MSU5LEB8SCQoFRVBJUEUQIBII",
          "CgRFRE9NECESCgoGRVJBTkdFECISCgoGRUFHQUlOECMSDwoLRUlOUFJPR1JF",
          "U1MQJBIMCghFQUxSRUFEWRAlEgwKCEVOT1RTT0NLECYSEAoMRURFU1RBRERS",
          "UkVRECcSDAoIRU1TR1NJWkUQKBIOCgpFUFJPVE9UWVBFECkSDwoLRU5PUFJP",
          "VE9PUFQQKhITCg9FUFJPVE9OT1NVUFBPUlQQKxITCg9FU09DS1ROT1NVUFBP",
          "UlQQLBIOCgpFT1BOT1RTVVBQEC0SEAoMRVBGTk9TVVBQT1JUEC4SEAoMRUFG",
          "Tk9TVVBQT1JUEC8SDgoKRUFERFJJTlVTRRAwEhEKDUVBRERSTk9UQVZBSUwQ",
          "MRIMCghFTkVURE9XThAyEg8KC0VORVRVTlJFQUNIEDMSDQoJRU5FVFJFU0VU",
          "EDQSEAoMRUNPTk5BQk9SVEVEEDUSDgoKRUNPTk5SRVNFVBA2EgsKB0VOT0JV",
          "RlMQNxILCgdFSVNDT05OEDgSDAoIRU5PVENPTk4QORINCglFU0hVVERPV04Q",
          "OhIQCgxFVE9PTUFOWVJFRlMQOxINCglFVElNRURPVVQQPBIQCgxFQ09OTlJF",
          "RlVTRUQQPRIJCgVFTE9PUBA+EhAKDEVOQU1FVE9PTE9ORxA/Eg0KCUVIT1NU",
          "RE9XThBAEhAKDEVIT1NUVU5SRUFDSBBBEg0KCUVOT1RFTVBUWRBCEgwKCEVQ",
          "Uk9DTElNEEMSCgoGRVVTRVJTEEQSCgoGRURRVU9UEEUSCgoGRVNUQUxFEEYS",
          "CwoHRVJFTU9URRBHEgsKB0VCQURSUEMQSBIQCgxFUlBDTUlTTUFUQ0gQSRIQ",
          "CgxFUFJPR1VOQVZBSUwQShIRCg1FUFJPR01JU01BVENIEEsSEAoMRVBST0NV",
          "TkFWQUlMEEwSCgoGRU5PTENLEE0SCgoGRU5PU1lTEE4SCgoGRUZUWVBFEE8S",
          "CQoFRUFVVEgQUBINCglFTkVFREFVVEgQURIJCgVFSURSTRBSEgoKBkVOT01T",
          "RxBTEg0KCUVPVkVSRkxPVxBUEg0KCUVDQU5DRUxFRBBVEgoKBkVJTFNFURBW",
          "EgsKB0VOT0FUVFIQVxILCgdFRE9PRlVTEFgSCwoHRUJBRE1TRxBZEg0KCUVN",
          "VUxUSUhPUBBaEgsKB0VOT0xJTksQWxIKCgZFUFJPVE8QXBIPCgtFTk9UQ0FQ",
          "QUJMRRBdEgkKBUVMQVNUEF5iBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MessageCategory), typeof(global::Errors), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PbMessage), global::PbMessage.Parser, new[]{ "Category", "Type", "Payload" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
/// <summary>
/// This holds each kind of message request that will be going through mira
/// </summary>
public enum MessageCategory {
  /// <summary>
  /// This is used for no message category
  /// </summary>
  [pbr::OriginalName("NONE")] None = 0,
  /// <summary>
  /// System messages
  /// </summary>
  [pbr::OriginalName("SYSTEM")] System = 1,
  /// <summary>
  /// Logging messages
  /// </summary>
  [pbr::OriginalName("LOG")] Log = 2,
  /// <summary>
  /// Debugger messages
  /// </summary>
  [pbr::OriginalName("DEBUG")] Debug = 3,
  /// <summary>
  /// File manager messages
  /// </summary>
  [pbr::OriginalName("FILE")] File = 4,
  /// <summary>
  /// Generic command messages
  /// </summary>
  [pbr::OriginalName("CMD")] Cmd = 5,
  /// <summary>
  /// THIS MUST ALWAYS BE THE LAST
  /// </summary>
  [pbr::OriginalName("MAX")] Max = 6,
}

public enum Errors {
  [pbr::OriginalName("EOK")] Eok = 0,
  /// <summary>
  /// Operation not permitted 
  /// </summary>
  [pbr::OriginalName("EPERM")] Eperm = 1,
  /// <summary>
  /// No such file or directory 
  /// </summary>
  [pbr::OriginalName("ENOENT")] Enoent = 2,
  /// <summary>
  /// No such process 
  /// </summary>
  [pbr::OriginalName("ESRCH")] Esrch = 3,
  /// <summary>
  /// Interrupted system call 
  /// </summary>
  [pbr::OriginalName("EINTR")] Eintr = 4,
  /// <summary>
  /// Input/output error 
  /// </summary>
  [pbr::OriginalName("EIO")] Eio = 5,
  /// <summary>
  /// Device not configured 
  /// </summary>
  [pbr::OriginalName("ENXIO")] Enxio = 6,
  /// <summary>
  /// Argument list too long 
  /// </summary>
  [pbr::OriginalName("E2BIG")] E2Big = 7,
  /// <summary>
  /// Exec format error 
  /// </summary>
  [pbr::OriginalName("ENOEXEC")] Enoexec = 8,
  /// <summary>
  /// Bad file descriptor 
  /// </summary>
  [pbr::OriginalName("EBADF")] Ebadf = 9,
  /// <summary>
  /// No child processes 
  /// </summary>
  [pbr::OriginalName("ECHILD")] Echild = 10,
  /// <summary>
  /// Resource deadlock avoided 
  /// </summary>
  [pbr::OriginalName("EDEADLK")] Edeadlk = 11,
  /// <summary>
  /// Cannot allocate memory 
  /// </summary>
  [pbr::OriginalName("ENOMEM")] Enomem = 12,
  /// <summary>
  /// Permission denied 
  /// </summary>
  [pbr::OriginalName("EACCES")] Eacces = 13,
  /// <summary>
  /// Bad address 
  /// </summary>
  [pbr::OriginalName("EFAULT")] Efault = 14,
  /// <summary>
  /// Block device required 
  /// </summary>
  [pbr::OriginalName("ENOTBLK")] Enotblk = 15,
  /// <summary>
  /// Device busy 
  /// </summary>
  [pbr::OriginalName("EBUSY")] Ebusy = 16,
  /// <summary>
  /// File exists 
  /// </summary>
  [pbr::OriginalName("EEXIST")] Eexist = 17,
  /// <summary>
  /// Cross-device link 
  /// </summary>
  [pbr::OriginalName("EXDEV")] Exdev = 18,
  /// <summary>
  /// Operation not supported by device 
  /// </summary>
  [pbr::OriginalName("ENODEV")] Enodev = 19,
  /// <summary>
  /// Not a directory 
  /// </summary>
  [pbr::OriginalName("ENOTDIR")] Enotdir = 20,
  /// <summary>
  /// Is a directory 
  /// </summary>
  [pbr::OriginalName("EISDIR")] Eisdir = 21,
  /// <summary>
  /// Invalid argument 
  /// </summary>
  [pbr::OriginalName("EINVAL")] Einval = 22,
  /// <summary>
  /// Too many open files in system 
  /// </summary>
  [pbr::OriginalName("ENFILE")] Enfile = 23,
  /// <summary>
  /// Too many open files 
  /// </summary>
  [pbr::OriginalName("EMFILE")] Emfile = 24,
  /// <summary>
  /// Inappropriate ioctl for device 
  /// </summary>
  [pbr::OriginalName("ENOTTY")] Enotty = 25,
  /// <summary>
  /// Text file busy 
  /// </summary>
  [pbr::OriginalName("ETXTBSY")] Etxtbsy = 26,
  /// <summary>
  /// File too large 
  /// </summary>
  [pbr::OriginalName("EFBIG")] Efbig = 27,
  /// <summary>
  /// No space left on device 
  /// </summary>
  [pbr::OriginalName("ENOSPC")] Enospc = 28,
  /// <summary>
  /// Illegal seek 
  /// </summary>
  [pbr::OriginalName("ESPIPE")] Espipe = 29,
  /// <summary>
  /// Read-only filesystem 
  /// </summary>
  [pbr::OriginalName("EROFS")] Erofs = 30,
  /// <summary>
  /// Too many links 
  /// </summary>
  [pbr::OriginalName("EMLINK")] Emlink = 31,
  /// <summary>
  /// Broken pipe 
  /// </summary>
  [pbr::OriginalName("EPIPE")] Epipe = 32,
  /// <summary>
  /// Numerical argument out of domain 
  /// </summary>
  [pbr::OriginalName("EDOM")] Edom = 33,
  /// <summary>
  /// Result too large 
  /// </summary>
  [pbr::OriginalName("ERANGE")] Erange = 34,
  /// <summary>
  /// Resource temporarily unavailable 
  /// </summary>
  [pbr::OriginalName("EAGAIN")] Eagain = 35,
  /// <summary>
  /// Operation now in progress 
  /// </summary>
  [pbr::OriginalName("EINPROGRESS")] Einprogress = 36,
  /// <summary>
  /// Operation already in progress 
  /// </summary>
  [pbr::OriginalName("EALREADY")] Ealready = 37,
  /// <summary>
  /// Socket operation on non-socket 
  /// </summary>
  [pbr::OriginalName("ENOTSOCK")] Enotsock = 38,
  /// <summary>
  /// Destination address required 
  /// </summary>
  [pbr::OriginalName("EDESTADDRREQ")] Edestaddrreq = 39,
  /// <summary>
  /// Message too long 
  /// </summary>
  [pbr::OriginalName("EMSGSIZE")] Emsgsize = 40,
  /// <summary>
  /// Protocol wrong type for socket 
  /// </summary>
  [pbr::OriginalName("EPROTOTYPE")] Eprototype = 41,
  /// <summary>
  /// Protocol not available 
  /// </summary>
  [pbr::OriginalName("ENOPROTOOPT")] Enoprotoopt = 42,
  /// <summary>
  /// Protocol not supported 
  /// </summary>
  [pbr::OriginalName("EPROTONOSUPPORT")] Eprotonosupport = 43,
  /// <summary>
  /// Socket type not supported 
  /// </summary>
  [pbr::OriginalName("ESOCKTNOSUPPORT")] Esocktnosupport = 44,
  /// <summary>
  /// Operation not supported 
  /// </summary>
  [pbr::OriginalName("EOPNOTSUPP")] Eopnotsupp = 45,
  /// <summary>
  /// Protocol family not supported 
  /// </summary>
  [pbr::OriginalName("EPFNOSUPPORT")] Epfnosupport = 46,
  /// <summary>
  /// Address family not supported by protocol family 
  /// </summary>
  [pbr::OriginalName("EAFNOSUPPORT")] Eafnosupport = 47,
  /// <summary>
  /// Address already in use 
  /// </summary>
  [pbr::OriginalName("EADDRINUSE")] Eaddrinuse = 48,
  /// <summary>
  /// Can't assign requested address 
  /// </summary>
  [pbr::OriginalName("EADDRNOTAVAIL")] Eaddrnotavail = 49,
  /// <summary>
  /// ipc/network software -- operational errors 
  /// </summary>
  [pbr::OriginalName("ENETDOWN")] Enetdown = 50,
  /// <summary>
  /// Network is unreachable 
  /// </summary>
  [pbr::OriginalName("ENETUNREACH")] Enetunreach = 51,
  /// <summary>
  /// Network dropped connection on reset 
  /// </summary>
  [pbr::OriginalName("ENETRESET")] Enetreset = 52,
  /// <summary>
  /// Software caused connection abort 
  /// </summary>
  [pbr::OriginalName("ECONNABORTED")] Econnaborted = 53,
  /// <summary>
  /// Connection reset by peer 
  /// </summary>
  [pbr::OriginalName("ECONNRESET")] Econnreset = 54,
  /// <summary>
  /// No buffer space available 
  /// </summary>
  [pbr::OriginalName("ENOBUFS")] Enobufs = 55,
  /// <summary>
  /// Socket is already connected 
  /// </summary>
  [pbr::OriginalName("EISCONN")] Eisconn = 56,
  /// <summary>
  /// Socket is not connected 
  /// </summary>
  [pbr::OriginalName("ENOTCONN")] Enotconn = 57,
  /// <summary>
  /// Can't send after socket shutdown 
  /// </summary>
  [pbr::OriginalName("ESHUTDOWN")] Eshutdown = 58,
  /// <summary>
  /// Too many references: can't splice 
  /// </summary>
  [pbr::OriginalName("ETOOMANYREFS")] Etoomanyrefs = 59,
  /// <summary>
  /// Operation timed out 
  /// </summary>
  [pbr::OriginalName("ETIMEDOUT")] Etimedout = 60,
  /// <summary>
  /// Connection refused 
  /// </summary>
  [pbr::OriginalName("ECONNREFUSED")] Econnrefused = 61,
  /// <summary>
  /// Too many levels of symbolic links 
  /// </summary>
  [pbr::OriginalName("ELOOP")] Eloop = 62,
  /// <summary>
  /// File name too long 
  /// </summary>
  [pbr::OriginalName("ENAMETOOLONG")] Enametoolong = 63,
  /// <summary>
  /// should be rearranged 
  /// </summary>
  [pbr::OriginalName("EHOSTDOWN")] Ehostdown = 64,
  /// <summary>
  /// No route to host 
  /// </summary>
  [pbr::OriginalName("EHOSTUNREACH")] Ehostunreach = 65,
  /// <summary>
  /// Directory not empty 
  /// </summary>
  [pbr::OriginalName("ENOTEMPTY")] Enotempty = 66,
  /// <summary>
  /// quotas &amp; mush 
  /// </summary>
  [pbr::OriginalName("EPROCLIM")] Eproclim = 67,
  /// <summary>
  /// Too many users 
  /// </summary>
  [pbr::OriginalName("EUSERS")] Eusers = 68,
  /// <summary>
  /// Disc quota exceeded 
  /// </summary>
  [pbr::OriginalName("EDQUOT")] Edquot = 69,
  /// <summary>
  /// Stale NFS file handle 
  /// </summary>
  [pbr::OriginalName("ESTALE")] Estale = 70,
  /// <summary>
  /// Too many levels of remote in path 
  /// </summary>
  [pbr::OriginalName("EREMOTE")] Eremote = 71,
  /// <summary>
  /// RPC struct is bad 
  /// </summary>
  [pbr::OriginalName("EBADRPC")] Ebadrpc = 72,
  /// <summary>
  /// RPC version wrong 
  /// </summary>
  [pbr::OriginalName("ERPCMISMATCH")] Erpcmismatch = 73,
  /// <summary>
  /// RPC prog. not avail 
  /// </summary>
  [pbr::OriginalName("EPROGUNAVAIL")] Eprogunavail = 74,
  /// <summary>
  /// Program version wrong 
  /// </summary>
  [pbr::OriginalName("EPROGMISMATCH")] Eprogmismatch = 75,
  /// <summary>
  /// Bad procedure for program 
  /// </summary>
  [pbr::OriginalName("EPROCUNAVAIL")] Eprocunavail = 76,
  /// <summary>
  /// No locks available 
  /// </summary>
  [pbr::OriginalName("ENOLCK")] Enolck = 77,
  /// <summary>
  /// Function not implemented 
  /// </summary>
  [pbr::OriginalName("ENOSYS")] Enosys = 78,
  /// <summary>
  /// Inappropriate file type or format 
  /// </summary>
  [pbr::OriginalName("EFTYPE")] Eftype = 79,
  /// <summary>
  /// Authentication error 
  /// </summary>
  [pbr::OriginalName("EAUTH")] Eauth = 80,
  /// <summary>
  /// Need authenticator 
  /// </summary>
  [pbr::OriginalName("ENEEDAUTH")] Eneedauth = 81,
  /// <summary>
  /// Identifier removed 
  /// </summary>
  [pbr::OriginalName("EIDRM")] Eidrm = 82,
  /// <summary>
  /// No message of desired type 
  /// </summary>
  [pbr::OriginalName("ENOMSG")] Enomsg = 83,
  /// <summary>
  /// Value too large to be stored in data type 
  /// </summary>
  [pbr::OriginalName("EOVERFLOW")] Eoverflow = 84,
  /// <summary>
  /// Operation canceled 
  /// </summary>
  [pbr::OriginalName("ECANCELED")] Ecanceled = 85,
  /// <summary>
  /// Illegal byte sequence 
  /// </summary>
  [pbr::OriginalName("EILSEQ")] Eilseq = 86,
  /// <summary>
  /// Attribute not found 
  /// </summary>
  [pbr::OriginalName("ENOATTR")] Enoattr = 87,
  /// <summary>
  /// Programming error 
  /// </summary>
  [pbr::OriginalName("EDOOFUS")] Edoofus = 88,
  /// <summary>
  /// Bad message 
  /// </summary>
  [pbr::OriginalName("EBADMSG")] Ebadmsg = 89,
  /// <summary>
  /// Multihop attempted 
  /// </summary>
  [pbr::OriginalName("EMULTIHOP")] Emultihop = 90,
  /// <summary>
  /// Link has been severed 
  /// </summary>
  [pbr::OriginalName("ENOLINK")] Enolink = 91,
  /// <summary>
  /// Protocol error 
  /// </summary>
  [pbr::OriginalName("EPROTO")] Eproto = 92,
  /// <summary>
  /// Capabilities insufficient 
  /// </summary>
  [pbr::OriginalName("ENOTCAPABLE")] Enotcapable = 93,
  /// <summary>
  /// Must be equal largest errno 
  /// </summary>
  [pbr::OriginalName("ELAST")] Elast = 94,
}

#endregion

#region Messages
public sealed partial class PbMessage : pb::IMessage<PbMessage> {
  private static readonly pb::MessageParser<PbMessage> _parser = new pb::MessageParser<PbMessage>(() => new PbMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PbMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MirabuiltinReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PbMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PbMessage(PbMessage other) : this() {
    category_ = other.category_;
    type_ = other.type_;
    payload_ = other.payload_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PbMessage Clone() {
    return new PbMessage(this);
  }

  /// <summary>Field number for the "category" field.</summary>
  public const int CategoryFieldNumber = 1;
  private global::MessageCategory category_ = 0;
  /// <summary>
  /// The category of each message
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MessageCategory Category {
    get { return category_; }
    set {
      category_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private uint type_;
  /// <summary>
  /// The message type (CRC32(&lt;Message Type Name>))
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "payload" field.</summary>
  public const int PayloadFieldNumber = 3;
  private pb::ByteString payload_ = pb::ByteString.Empty;
  /// <summary>
  /// The self contained protobuf message
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Payload {
    get { return payload_; }
    set {
      payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PbMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PbMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Category != other.Category) return false;
    if (Type != other.Type) return false;
    if (Payload != other.Payload) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Category != 0) hash ^= Category.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Payload.Length != 0) hash ^= Payload.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Category != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Category);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Type);
    }
    if (Payload.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Payload);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Category != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
    }
    if (Payload.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PbMessage other) {
    if (other == null) {
      return;
    }
    if (other.Category != 0) {
      Category = other.Category;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Payload.Length != 0) {
      Payload = other.Payload;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          if (!pb::UnknownFieldSet.MergeFieldFrom(ref _unknownFields, input)) {
            return;
          }
          break;
        case 8: {
          Category = (global::MessageCategory) input.ReadEnum();
          break;
        }
        case 16: {
          Type = input.ReadUInt32();
          break;
        }
        case 26: {
          Payload = input.ReadBytes();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
