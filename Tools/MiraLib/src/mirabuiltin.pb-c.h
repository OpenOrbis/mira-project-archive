/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: mirabuiltin.proto */

#ifndef PROTOBUF_C_mirabuiltin_2eproto__INCLUDED
#define PROTOBUF_C_mirabuiltin_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _IntValue IntValue;
typedef struct _PbMessage PbMessage;


/* --- enums --- */

/*
 * This holds each kind of message request that will be going through mira
 */
typedef enum _MessageCategory {
  /*
   * This is used for no message category
   */
  MESSAGE_CATEGORY__NONE = 0,
  /*
   * System messages
   */
  MESSAGE_CATEGORY__SYSTEM = 1,
  /*
   * Logging messages
   */
  MESSAGE_CATEGORY__LOG = 2,
  /*
   * Debugger messages
   */
  MESSAGE_CATEGORY__DEBUG = 3,
  /*
   * File manager messages
   */
  MESSAGE_CATEGORY__FILE = 4,
  /*
   * Generic command messages
   */
  MESSAGE_CATEGORY__CMD = 5,
  /*
   * THIS MUST ALWAYS BE THE LAST
   */
  MESSAGE_CATEGORY__MAX = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_CATEGORY)
} MessageCategory;
typedef enum _Errors {
  ERRORS__EOK = 0,
  /*
   * Operation not permitted 
   */
  ERRORS__EPERM = 1,
  /*
   * No such file or directory 
   */
  ERRORS__ENOENT = 2,
  /*
   * No such process 
   */
  ERRORS__ESRCH = 3,
  /*
   * Interrupted system call 
   */
  ERRORS__EINTR = 4,
  /*
   * Input/output error 
   */
  ERRORS__EIO = 5,
  /*
   * Device not configured 
   */
  ERRORS__ENXIO = 6,
  /*
   * Argument list too long 
   */
  ERRORS__E2BIG = 7,
  /*
   * Exec format error 
   */
  ERRORS__ENOEXEC = 8,
  /*
   * Bad file descriptor 
   */
  ERRORS__EBADF = 9,
  /*
   * No child processes 
   */
  ERRORS__ECHILD = 10,
  /*
   * Resource deadlock avoided 
   */
  ERRORS__EDEADLK = 11,
  /*
   * Cannot allocate memory 
   */
  ERRORS__ENOMEM = 12,
  /*
   * Permission denied 
   */
  ERRORS__EACCES = 13,
  /*
   * Bad address 
   */
  ERRORS__EFAULT = 14,
  /*
   * Block device required 
   */
  ERRORS__ENOTBLK = 15,
  /*
   * Device busy 
   */
  ERRORS__EBUSY = 16,
  /*
   * File exists 
   */
  ERRORS__EEXIST = 17,
  /*
   * Cross-device link 
   */
  ERRORS__EXDEV = 18,
  /*
   * Operation not supported by device 
   */
  ERRORS__ENODEV = 19,
  /*
   * Not a directory 
   */
  ERRORS__ENOTDIR = 20,
  /*
   * Is a directory 
   */
  ERRORS__EISDIR = 21,
  /*
   * Invalid argument 
   */
  ERRORS__EINVAL = 22,
  /*
   * Too many open files in system 
   */
  ERRORS__ENFILE = 23,
  /*
   * Too many open files 
   */
  ERRORS__EMFILE = 24,
  /*
   * Inappropriate ioctl for device 
   */
  ERRORS__ENOTTY = 25,
  /*
   * Text file busy 
   */
  ERRORS__ETXTBSY = 26,
  /*
   * File too large 
   */
  ERRORS__EFBIG = 27,
  /*
   * No space left on device 
   */
  ERRORS__ENOSPC = 28,
  /*
   * Illegal seek 
   */
  ERRORS__ESPIPE = 29,
  /*
   * Read-only filesystem 
   */
  ERRORS__EROFS = 30,
  /*
   * Too many links 
   */
  ERRORS__EMLINK = 31,
  /*
   * Broken pipe 
   */
  ERRORS__EPIPE = 32,
  /*
   * Numerical argument out of domain 
   */
  ERRORS__EDOM = 33,
  /*
   * Result too large 
   */
  ERRORS__ERANGE = 34,
  /*
   * Resource temporarily unavailable 
   */
  ERRORS__EAGAIN = 35,
  /*
   * Operation now in progress 
   */
  ERRORS__EINPROGRESS = 36,
  /*
   * Operation already in progress 
   */
  ERRORS__EALREADY = 37,
  /*
   * Socket operation on non-socket 
   */
  ERRORS__ENOTSOCK = 38,
  /*
   * Destination address required 
   */
  ERRORS__EDESTADDRREQ = 39,
  /*
   * Message too long 
   */
  ERRORS__EMSGSIZE = 40,
  /*
   * Protocol wrong type for socket 
   */
  ERRORS__EPROTOTYPE = 41,
  /*
   * Protocol not available 
   */
  ERRORS__ENOPROTOOPT = 42,
  /*
   * Protocol not supported 
   */
  ERRORS__EPROTONOSUPPORT = 43,
  /*
   * Socket type not supported 
   */
  ERRORS__ESOCKTNOSUPPORT = 44,
  /*
   * Operation not supported 
   */
  ERRORS__EOPNOTSUPP = 45,
  /*
   * Protocol family not supported 
   */
  ERRORS__EPFNOSUPPORT = 46,
  /*
   * Address family not supported by protocol family 
   */
  ERRORS__EAFNOSUPPORT = 47,
  /*
   * Address already in use 
   */
  ERRORS__EADDRINUSE = 48,
  /*
   * Can't assign requested address 
   */
  ERRORS__EADDRNOTAVAIL = 49,
  /*
   * ipc/network software -- operational errors 
   */
  /*
   * Network is down 
   */
  ERRORS__ENETDOWN = 50,
  /*
   * Network is unreachable 
   */
  ERRORS__ENETUNREACH = 51,
  /*
   * Network dropped connection on reset 
   */
  ERRORS__ENETRESET = 52,
  /*
   * Software caused connection abort 
   */
  ERRORS__ECONNABORTED = 53,
  /*
   * Connection reset by peer 
   */
  ERRORS__ECONNRESET = 54,
  /*
   * No buffer space available 
   */
  ERRORS__ENOBUFS = 55,
  /*
   * Socket is already connected 
   */
  ERRORS__EISCONN = 56,
  /*
   * Socket is not connected 
   */
  ERRORS__ENOTCONN = 57,
  /*
   * Can't send after socket shutdown 
   */
  ERRORS__ESHUTDOWN = 58,
  /*
   * Too many references: can't splice 
   */
  ERRORS__ETOOMANYREFS = 59,
  /*
   * Operation timed out 
   */
  ERRORS__ETIMEDOUT = 60,
  /*
   * Connection refused 
   */
  ERRORS__ECONNREFUSED = 61,
  /*
   * Too many levels of symbolic links 
   */
  ERRORS__ELOOP = 62,
  /*
   * File name too long 
   */
  ERRORS__ENAMETOOLONG = 63,
  /*
   * should be rearranged 
   */
  /*
   * Host is down 
   */
  ERRORS__EHOSTDOWN = 64,
  /*
   * No route to host 
   */
  ERRORS__EHOSTUNREACH = 65,
  /*
   * Directory not empty 
   */
  ERRORS__ENOTEMPTY = 66,
  /*
   * quotas & mush 
   */
  /*
   * Too many processes 
   */
  ERRORS__EPROCLIM = 67,
  /*
   * Too many users 
   */
  ERRORS__EUSERS = 68,
  /*
   * Disc quota exceeded 
   */
  ERRORS__EDQUOT = 69,
  /*
   * Stale NFS file handle 
   */
  ERRORS__ESTALE = 70,
  /*
   * Too many levels of remote in path 
   */
  ERRORS__EREMOTE = 71,
  /*
   * RPC struct is bad 
   */
  ERRORS__EBADRPC = 72,
  /*
   * RPC version wrong 
   */
  ERRORS__ERPCMISMATCH = 73,
  /*
   * RPC prog. not avail 
   */
  ERRORS__EPROGUNAVAIL = 74,
  /*
   * Program version wrong 
   */
  ERRORS__EPROGMISMATCH = 75,
  /*
   * Bad procedure for program 
   */
  ERRORS__EPROCUNAVAIL = 76,
  /*
   * No locks available 
   */
  ERRORS__ENOLCK = 77,
  /*
   * Function not implemented 
   */
  ERRORS__ENOSYS = 78,
  /*
   * Inappropriate file type or format 
   */
  ERRORS__EFTYPE = 79,
  /*
   * Authentication error 
   */
  ERRORS__EAUTH = 80,
  /*
   * Need authenticator 
   */
  ERRORS__ENEEDAUTH = 81,
  /*
   * Identifier removed 
   */
  ERRORS__EIDRM = 82,
  /*
   * No message of desired type 
   */
  ERRORS__ENOMSG = 83,
  /*
   * Value too large to be stored in data type 
   */
  ERRORS__EOVERFLOW = 84,
  /*
   * Operation canceled 
   */
  ERRORS__ECANCELED = 85,
  /*
   * Illegal byte sequence 
   */
  ERRORS__EILSEQ = 86,
  /*
   * Attribute not found 
   */
  ERRORS__ENOATTR = 87,
  /*
   * Programming error 
   */
  ERRORS__EDOOFUS = 88,
  /*
   * Bad message 
   */
  ERRORS__EBADMSG = 89,
  /*
   * Multihop attempted 
   */
  ERRORS__EMULTIHOP = 90,
  /*
   * Link has been severed 
   */
  ERRORS__ENOLINK = 91,
  /*
   * Protocol error 
   */
  ERRORS__EPROTO = 92,
  /*
   * Capabilities insufficient 
   */
  ERRORS__ENOTCAPABLE = 93,
  /*
   * Must be equal largest errno 
   */
  ERRORS__ELAST = 94
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ERRORS)
} Errors;

/* --- messages --- */

struct  _IntValue
{
  ProtobufCMessage base;
  int32_t value;
};
#define INT_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&int_value__descriptor) \
    , 0 }


struct  _PbMessage
{
  ProtobufCMessage base;
  /*
   * The category of each message
   */
  MessageCategory category;
  /*
   * The message type (CRC32(<Message Type Name>))
   */
  uint32_t type;
  /*
   * The self contained protobuf message
   */
  ProtobufCBinaryData data;
};
#define PB_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pb_message__descriptor) \
    , MESSAGE_CATEGORY__NONE, 0, {0,NULL} }


/* IntValue methods */
void   int_value__init
                     (IntValue         *message);
size_t int_value__get_packed_size
                     (const IntValue   *message);
size_t int_value__pack
                     (const IntValue   *message,
                      uint8_t             *out);
size_t int_value__pack_to_buffer
                     (const IntValue   *message,
                      ProtobufCBuffer     *buffer);
IntValue *
       int_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   int_value__free_unpacked
                     (IntValue *message,
                      ProtobufCAllocator *allocator);
/* PbMessage methods */
void   pb_message__init
                     (PbMessage         *message);
size_t pb_message__get_packed_size
                     (const PbMessage   *message);
size_t pb_message__pack
                     (const PbMessage   *message,
                      uint8_t             *out);
size_t pb_message__pack_to_buffer
                     (const PbMessage   *message,
                      ProtobufCBuffer     *buffer);
PbMessage *
       pb_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pb_message__free_unpacked
                     (PbMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*IntValue_Closure)
                 (const IntValue *message,
                  void *closure_data);
typedef void (*PbMessage_Closure)
                 (const PbMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    message_category__descriptor;
extern const ProtobufCEnumDescriptor    errors__descriptor;
extern const ProtobufCMessageDescriptor int_value__descriptor;
extern const ProtobufCMessageDescriptor pb_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_mirabuiltin_2eproto__INCLUDED */
