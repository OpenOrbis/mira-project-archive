/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: fileexplorer.proto */

#ifndef PROTOBUF_C_fileexplorer_2eproto__INCLUDED
#define PROTOBUF_C_fileexplorer_2eproto__INCLUDED

#include <protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _DirEnt DirEnt;
typedef struct _EchoRequest EchoRequest;
typedef struct _EchoResponse EchoResponse;
typedef struct _OpenRequest OpenRequest;
typedef struct _OpenResponse OpenResponse;
typedef struct _CloseRequest CloseRequest;
typedef struct _CloseResponse CloseResponse;
typedef struct _ReadRequest ReadRequest;
typedef struct _ReadResponse ReadResponse;
typedef struct _WriteRequest WriteRequest;
typedef struct _WriteResponse WriteResponse;
typedef struct _MakeDirectoryRequest MakeDirectoryRequest;
typedef struct _MakeDirectoryResponse MakeDirectoryResponse;
typedef struct _RemoveDirectoryRequest RemoveDirectoryRequest;
typedef struct _RemoveDirectoryResponse RemoveDirectoryResponse;
typedef struct _UnlinkRequest UnlinkRequest;
typedef struct _UnlinkResponse UnlinkResponse;
typedef struct _TimeSpec TimeSpec;
typedef struct _StatRequest StatRequest;
typedef struct _StatResponse StatResponse;
typedef struct _GetDentsRequest GetDentsRequest;
typedef struct _GetDentsResponse GetDentsResponse;


/* --- enums --- */

typedef enum _DirEnt__DirectoryType {
  DIR_ENT__DIRECTORY_TYPE__DT_UNKNOWN = 0,
  DIR_ENT__DIRECTORY_TYPE__DT_FIFO = 1,
  DIR_ENT__DIRECTORY_TYPE__DT_CHR = 2,
  DIR_ENT__DIRECTORY_TYPE__DT_DIR = 4,
  DIR_ENT__DIRECTORY_TYPE__DT_BLK = 6,
  DIR_ENT__DIRECTORY_TYPE__DT_REG = 8,
  DIR_ENT__DIRECTORY_TYPE__DT_LNK = 10,
  DIR_ENT__DIRECTORY_TYPE__DT_SOCK = 12,
  DIR_ENT__DIRECTORY_TYPE__DT_WHT = 14
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DIR_ENT__DIRECTORY_TYPE)
} DirEnt__DirectoryType;
typedef enum _FileTransferCommands {
  FILE_TRANSFER_COMMANDS__Echo = 0,
  FILE_TRANSFER_COMMANDS__Open = 1,
  FILE_TRANSFER_COMMANDS__Close = 2,
  FILE_TRANSFER_COMMANDS__GetDents = 3,
  FILE_TRANSFER_COMMANDS__Read = 4,
  FILE_TRANSFER_COMMANDS__Write = 5,
  FILE_TRANSFER_COMMANDS__Unlink = 6,
  FILE_TRANSFER_COMMANDS__Move = 7,
  FILE_TRANSFER_COMMANDS__Stat = 8,
  FILE_TRANSFER_COMMANDS__MkDir = 9,
  FILE_TRANSFER_COMMANDS__RmDir = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FILE_TRANSFER_COMMANDS)
} FileTransferCommands;

/* --- messages --- */

struct  _DirEnt
{
  ProtobufCMessage base;
  uint32_t fileno;
  uint32_t reclen;
  DirEnt__DirectoryType type;
  char *name;
};
#define DIR_ENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dir_ent__descriptor) \
    , 0, 0, DIR_ENT__DIRECTORY_TYPE__DT_UNKNOWN, (char *)protobuf_c_empty_string }


/*
 * echo
 */
struct  _EchoRequest
{
  ProtobufCMessage base;
  char *message;
};
#define ECHO_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&echo_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _EchoResponse
{
  ProtobufCMessage base;
  int32_t error;
};
#define ECHO_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&echo_response__descriptor) \
    , 0 }


/*
 * open
 */
struct  _OpenRequest
{
  ProtobufCMessage base;
  char *path;
  int32_t flags;
  int32_t mode;
};
#define OPEN_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&open_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0 }


struct  _OpenResponse
{
  ProtobufCMessage base;
  int32_t error;
  int32_t handle;
};
#define OPEN_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&open_response__descriptor) \
    , 0, 0 }


/*
 * close
 */
struct  _CloseRequest
{
  ProtobufCMessage base;
  /*
   * Handle of the file to close
   */
  int32_t handle;
};
#define CLOSE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&close_request__descriptor) \
    , 0 }


struct  _CloseResponse
{
  ProtobufCMessage base;
  int32_t error;
};
#define CLOSE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&close_response__descriptor) \
    , 0 }


/*
 * read
 */
struct  _ReadRequest
{
  ProtobufCMessage base;
  int32_t handle;
  uint64_t offset;
  uint64_t size;
};
#define READ_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&read_request__descriptor) \
    , 0, 0, 0 }


struct  _ReadResponse
{
  ProtobufCMessage base;
  int32_t error;
  ProtobufCBinaryData data;
};
#define READ_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&read_response__descriptor) \
    , 0, {0,NULL} }


/*
 * write
 */
struct  _WriteRequest
{
  ProtobufCMessage base;
  int32_t handle;
  uint64_t offset;
  ProtobufCBinaryData data;
};
#define WRITE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&write_request__descriptor) \
    , 0, 0, {0,NULL} }


struct  _WriteResponse
{
  ProtobufCMessage base;
  int32_t error;
};
#define WRITE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&write_response__descriptor) \
    , 0 }


/*
 * mkdir
 */
struct  _MakeDirectoryRequest
{
  ProtobufCMessage base;
  char *path;
  int32_t mode;
};
#define MAKE_DIRECTORY_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&make_directory_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _MakeDirectoryResponse
{
  ProtobufCMessage base;
  int32_t error;
};
#define MAKE_DIRECTORY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&make_directory_response__descriptor) \
    , 0 }


/*
 * rmdir
 */
struct  _RemoveDirectoryRequest
{
  ProtobufCMessage base;
  /*
   * Path to remove
   */
  char *path;
  /*
   * Recursively delete all files + folders in this directory
   */
  int32_t recursive;
};
#define REMOVE_DIRECTORY_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remove_directory_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _RemoveDirectoryResponse
{
  ProtobufCMessage base;
  int32_t error;
};
#define REMOVE_DIRECTORY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remove_directory_response__descriptor) \
    , 0 }


/*
 * unlink
 */
struct  _UnlinkRequest
{
  ProtobufCMessage base;
  char *path;
};
#define UNLINK_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&unlink_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _UnlinkResponse
{
  ProtobufCMessage base;
  int32_t error;
};
#define UNLINK_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&unlink_response__descriptor) \
    , 0 }


/*
 * stats
 */
struct  _TimeSpec
{
  ProtobufCMessage base;
  int64_t sec;
  uint64_t nsec;
};
#define TIME_SPEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&time_spec__descriptor) \
    , 0, 0 }


struct  _StatRequest
{
  ProtobufCMessage base;
  /*
   * Will allow to stat a handle, if -1 then will use path
   */
  int32_t handle;
  char *path;
};
#define STAT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&stat_request__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


struct  _StatResponse
{
  ProtobufCMessage base;
  int32_t error;
  char *path;
  /*
   * device
   */
  uint32_t dev;
  /*
   * inode
   */
  uint32_t ino;
  /*
   * protection mode, uint16
   */
  uint32_t mode;
  /*
   * number of hard links, uint16
   */
  uint32_t nlink;
  /*
   * user id
   */
  uint32_t uid;
  /*
   * group id
   */
  uint32_t gid;
  /*
   * device type
   */
  uint32_t rdev;
  /*
   * time of last access
   */
  TimeSpec *atim;
  /*
   * time of last modification
   */
  TimeSpec *mtim;
  /*
   * time of last file status change
   */
  TimeSpec *ctim;
  /*
   * file size, in blocks
   */
  int64_t size;
  /*
   * blocks allocated for file
   */
  int64_t blocks;
  /*
   * optimal blocksize for i/o
   */
  uint32_t blksize;
  /*
   * user defined flags
   */
  uint32_t flags;
  /*
   * file generation number
   */
  uint32_t gen;
  int32_t lspare;
  /*
   * time of creation
   */
  TimeSpec *birthtim;
};
#define STAT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&stat_response__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, 0, 0, 0, NULL }


/*
 * getdents
 */
struct  _GetDentsRequest
{
  ProtobufCMessage base;
  char *path;
};
#define GET_DENTS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_dents_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _GetDentsResponse
{
  ProtobufCMessage base;
  int32_t error;
  size_t n_entries;
  DirEnt **entries;
};
#define GET_DENTS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_dents_response__descriptor) \
    , 0, 0,NULL }


/* DirEnt methods */
void   dir_ent__init
                     (DirEnt         *message);
size_t dir_ent__get_packed_size
                     (const DirEnt   *message);
size_t dir_ent__pack
                     (const DirEnt   *message,
                      uint8_t             *out);
size_t dir_ent__pack_to_buffer
                     (const DirEnt   *message,
                      ProtobufCBuffer     *buffer);
DirEnt *
       dir_ent__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dir_ent__free_unpacked
                     (DirEnt *message,
                      ProtobufCAllocator *allocator);
/* EchoRequest methods */
void   echo_request__init
                     (EchoRequest         *message);
size_t echo_request__get_packed_size
                     (const EchoRequest   *message);
size_t echo_request__pack
                     (const EchoRequest   *message,
                      uint8_t             *out);
size_t echo_request__pack_to_buffer
                     (const EchoRequest   *message,
                      ProtobufCBuffer     *buffer);
EchoRequest *
       echo_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   echo_request__free_unpacked
                     (EchoRequest *message,
                      ProtobufCAllocator *allocator);
/* EchoResponse methods */
void   echo_response__init
                     (EchoResponse         *message);
size_t echo_response__get_packed_size
                     (const EchoResponse   *message);
size_t echo_response__pack
                     (const EchoResponse   *message,
                      uint8_t             *out);
size_t echo_response__pack_to_buffer
                     (const EchoResponse   *message,
                      ProtobufCBuffer     *buffer);
EchoResponse *
       echo_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   echo_response__free_unpacked
                     (EchoResponse *message,
                      ProtobufCAllocator *allocator);
/* OpenRequest methods */
void   open_request__init
                     (OpenRequest         *message);
size_t open_request__get_packed_size
                     (const OpenRequest   *message);
size_t open_request__pack
                     (const OpenRequest   *message,
                      uint8_t             *out);
size_t open_request__pack_to_buffer
                     (const OpenRequest   *message,
                      ProtobufCBuffer     *buffer);
OpenRequest *
       open_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   open_request__free_unpacked
                     (OpenRequest *message,
                      ProtobufCAllocator *allocator);
/* OpenResponse methods */
void   open_response__init
                     (OpenResponse         *message);
size_t open_response__get_packed_size
                     (const OpenResponse   *message);
size_t open_response__pack
                     (const OpenResponse   *message,
                      uint8_t             *out);
size_t open_response__pack_to_buffer
                     (const OpenResponse   *message,
                      ProtobufCBuffer     *buffer);
OpenResponse *
       open_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   open_response__free_unpacked
                     (OpenResponse *message,
                      ProtobufCAllocator *allocator);
/* CloseRequest methods */
void   close_request__init
                     (CloseRequest         *message);
size_t close_request__get_packed_size
                     (const CloseRequest   *message);
size_t close_request__pack
                     (const CloseRequest   *message,
                      uint8_t             *out);
size_t close_request__pack_to_buffer
                     (const CloseRequest   *message,
                      ProtobufCBuffer     *buffer);
CloseRequest *
       close_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   close_request__free_unpacked
                     (CloseRequest *message,
                      ProtobufCAllocator *allocator);
/* CloseResponse methods */
void   close_response__init
                     (CloseResponse         *message);
size_t close_response__get_packed_size
                     (const CloseResponse   *message);
size_t close_response__pack
                     (const CloseResponse   *message,
                      uint8_t             *out);
size_t close_response__pack_to_buffer
                     (const CloseResponse   *message,
                      ProtobufCBuffer     *buffer);
CloseResponse *
       close_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   close_response__free_unpacked
                     (CloseResponse *message,
                      ProtobufCAllocator *allocator);
/* ReadRequest methods */
void   read_request__init
                     (ReadRequest         *message);
size_t read_request__get_packed_size
                     (const ReadRequest   *message);
size_t read_request__pack
                     (const ReadRequest   *message,
                      uint8_t             *out);
size_t read_request__pack_to_buffer
                     (const ReadRequest   *message,
                      ProtobufCBuffer     *buffer);
ReadRequest *
       read_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   read_request__free_unpacked
                     (ReadRequest *message,
                      ProtobufCAllocator *allocator);
/* ReadResponse methods */
void   read_response__init
                     (ReadResponse         *message);
size_t read_response__get_packed_size
                     (const ReadResponse   *message);
size_t read_response__pack
                     (const ReadResponse   *message,
                      uint8_t             *out);
size_t read_response__pack_to_buffer
                     (const ReadResponse   *message,
                      ProtobufCBuffer     *buffer);
ReadResponse *
       read_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   read_response__free_unpacked
                     (ReadResponse *message,
                      ProtobufCAllocator *allocator);
/* WriteRequest methods */
void   write_request__init
                     (WriteRequest         *message);
size_t write_request__get_packed_size
                     (const WriteRequest   *message);
size_t write_request__pack
                     (const WriteRequest   *message,
                      uint8_t             *out);
size_t write_request__pack_to_buffer
                     (const WriteRequest   *message,
                      ProtobufCBuffer     *buffer);
WriteRequest *
       write_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   write_request__free_unpacked
                     (WriteRequest *message,
                      ProtobufCAllocator *allocator);
/* WriteResponse methods */
void   write_response__init
                     (WriteResponse         *message);
size_t write_response__get_packed_size
                     (const WriteResponse   *message);
size_t write_response__pack
                     (const WriteResponse   *message,
                      uint8_t             *out);
size_t write_response__pack_to_buffer
                     (const WriteResponse   *message,
                      ProtobufCBuffer     *buffer);
WriteResponse *
       write_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   write_response__free_unpacked
                     (WriteResponse *message,
                      ProtobufCAllocator *allocator);
/* MakeDirectoryRequest methods */
void   make_directory_request__init
                     (MakeDirectoryRequest         *message);
size_t make_directory_request__get_packed_size
                     (const MakeDirectoryRequest   *message);
size_t make_directory_request__pack
                     (const MakeDirectoryRequest   *message,
                      uint8_t             *out);
size_t make_directory_request__pack_to_buffer
                     (const MakeDirectoryRequest   *message,
                      ProtobufCBuffer     *buffer);
MakeDirectoryRequest *
       make_directory_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   make_directory_request__free_unpacked
                     (MakeDirectoryRequest *message,
                      ProtobufCAllocator *allocator);
/* MakeDirectoryResponse methods */
void   make_directory_response__init
                     (MakeDirectoryResponse         *message);
size_t make_directory_response__get_packed_size
                     (const MakeDirectoryResponse   *message);
size_t make_directory_response__pack
                     (const MakeDirectoryResponse   *message,
                      uint8_t             *out);
size_t make_directory_response__pack_to_buffer
                     (const MakeDirectoryResponse   *message,
                      ProtobufCBuffer     *buffer);
MakeDirectoryResponse *
       make_directory_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   make_directory_response__free_unpacked
                     (MakeDirectoryResponse *message,
                      ProtobufCAllocator *allocator);
/* RemoveDirectoryRequest methods */
void   remove_directory_request__init
                     (RemoveDirectoryRequest         *message);
size_t remove_directory_request__get_packed_size
                     (const RemoveDirectoryRequest   *message);
size_t remove_directory_request__pack
                     (const RemoveDirectoryRequest   *message,
                      uint8_t             *out);
size_t remove_directory_request__pack_to_buffer
                     (const RemoveDirectoryRequest   *message,
                      ProtobufCBuffer     *buffer);
RemoveDirectoryRequest *
       remove_directory_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remove_directory_request__free_unpacked
                     (RemoveDirectoryRequest *message,
                      ProtobufCAllocator *allocator);
/* RemoveDirectoryResponse methods */
void   remove_directory_response__init
                     (RemoveDirectoryResponse         *message);
size_t remove_directory_response__get_packed_size
                     (const RemoveDirectoryResponse   *message);
size_t remove_directory_response__pack
                     (const RemoveDirectoryResponse   *message,
                      uint8_t             *out);
size_t remove_directory_response__pack_to_buffer
                     (const RemoveDirectoryResponse   *message,
                      ProtobufCBuffer     *buffer);
RemoveDirectoryResponse *
       remove_directory_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remove_directory_response__free_unpacked
                     (RemoveDirectoryResponse *message,
                      ProtobufCAllocator *allocator);
/* UnlinkRequest methods */
void   unlink_request__init
                     (UnlinkRequest         *message);
size_t unlink_request__get_packed_size
                     (const UnlinkRequest   *message);
size_t unlink_request__pack
                     (const UnlinkRequest   *message,
                      uint8_t             *out);
size_t unlink_request__pack_to_buffer
                     (const UnlinkRequest   *message,
                      ProtobufCBuffer     *buffer);
UnlinkRequest *
       unlink_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   unlink_request__free_unpacked
                     (UnlinkRequest *message,
                      ProtobufCAllocator *allocator);
/* UnlinkResponse methods */
void   unlink_response__init
                     (UnlinkResponse         *message);
size_t unlink_response__get_packed_size
                     (const UnlinkResponse   *message);
size_t unlink_response__pack
                     (const UnlinkResponse   *message,
                      uint8_t             *out);
size_t unlink_response__pack_to_buffer
                     (const UnlinkResponse   *message,
                      ProtobufCBuffer     *buffer);
UnlinkResponse *
       unlink_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   unlink_response__free_unpacked
                     (UnlinkResponse *message,
                      ProtobufCAllocator *allocator);
/* TimeSpec methods */
void   time_spec__init
                     (TimeSpec         *message);
size_t time_spec__get_packed_size
                     (const TimeSpec   *message);
size_t time_spec__pack
                     (const TimeSpec   *message,
                      uint8_t             *out);
size_t time_spec__pack_to_buffer
                     (const TimeSpec   *message,
                      ProtobufCBuffer     *buffer);
TimeSpec *
       time_spec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   time_spec__free_unpacked
                     (TimeSpec *message,
                      ProtobufCAllocator *allocator);
/* StatRequest methods */
void   stat_request__init
                     (StatRequest         *message);
size_t stat_request__get_packed_size
                     (const StatRequest   *message);
size_t stat_request__pack
                     (const StatRequest   *message,
                      uint8_t             *out);
size_t stat_request__pack_to_buffer
                     (const StatRequest   *message,
                      ProtobufCBuffer     *buffer);
StatRequest *
       stat_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   stat_request__free_unpacked
                     (StatRequest *message,
                      ProtobufCAllocator *allocator);
/* StatResponse methods */
void   stat_response__init
                     (StatResponse         *message);
size_t stat_response__get_packed_size
                     (const StatResponse   *message);
size_t stat_response__pack
                     (const StatResponse   *message,
                      uint8_t             *out);
size_t stat_response__pack_to_buffer
                     (const StatResponse   *message,
                      ProtobufCBuffer     *buffer);
StatResponse *
       stat_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   stat_response__free_unpacked
                     (StatResponse *message,
                      ProtobufCAllocator *allocator);
/* GetDentsRequest methods */
void   get_dents_request__init
                     (GetDentsRequest         *message);
size_t get_dents_request__get_packed_size
                     (const GetDentsRequest   *message);
size_t get_dents_request__pack
                     (const GetDentsRequest   *message,
                      uint8_t             *out);
size_t get_dents_request__pack_to_buffer
                     (const GetDentsRequest   *message,
                      ProtobufCBuffer     *buffer);
GetDentsRequest *
       get_dents_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_dents_request__free_unpacked
                     (GetDentsRequest *message,
                      ProtobufCAllocator *allocator);
/* GetDentsResponse methods */
void   get_dents_response__init
                     (GetDentsResponse         *message);
size_t get_dents_response__get_packed_size
                     (const GetDentsResponse   *message);
size_t get_dents_response__pack
                     (const GetDentsResponse   *message,
                      uint8_t             *out);
size_t get_dents_response__pack_to_buffer
                     (const GetDentsResponse   *message,
                      ProtobufCBuffer     *buffer);
GetDentsResponse *
       get_dents_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_dents_response__free_unpacked
                     (GetDentsResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DirEnt_Closure)
                 (const DirEnt *message,
                  void *closure_data);
typedef void (*EchoRequest_Closure)
                 (const EchoRequest *message,
                  void *closure_data);
typedef void (*EchoResponse_Closure)
                 (const EchoResponse *message,
                  void *closure_data);
typedef void (*OpenRequest_Closure)
                 (const OpenRequest *message,
                  void *closure_data);
typedef void (*OpenResponse_Closure)
                 (const OpenResponse *message,
                  void *closure_data);
typedef void (*CloseRequest_Closure)
                 (const CloseRequest *message,
                  void *closure_data);
typedef void (*CloseResponse_Closure)
                 (const CloseResponse *message,
                  void *closure_data);
typedef void (*ReadRequest_Closure)
                 (const ReadRequest *message,
                  void *closure_data);
typedef void (*ReadResponse_Closure)
                 (const ReadResponse *message,
                  void *closure_data);
typedef void (*WriteRequest_Closure)
                 (const WriteRequest *message,
                  void *closure_data);
typedef void (*WriteResponse_Closure)
                 (const WriteResponse *message,
                  void *closure_data);
typedef void (*MakeDirectoryRequest_Closure)
                 (const MakeDirectoryRequest *message,
                  void *closure_data);
typedef void (*MakeDirectoryResponse_Closure)
                 (const MakeDirectoryResponse *message,
                  void *closure_data);
typedef void (*RemoveDirectoryRequest_Closure)
                 (const RemoveDirectoryRequest *message,
                  void *closure_data);
typedef void (*RemoveDirectoryResponse_Closure)
                 (const RemoveDirectoryResponse *message,
                  void *closure_data);
typedef void (*UnlinkRequest_Closure)
                 (const UnlinkRequest *message,
                  void *closure_data);
typedef void (*UnlinkResponse_Closure)
                 (const UnlinkResponse *message,
                  void *closure_data);
typedef void (*TimeSpec_Closure)
                 (const TimeSpec *message,
                  void *closure_data);
typedef void (*StatRequest_Closure)
                 (const StatRequest *message,
                  void *closure_data);
typedef void (*StatResponse_Closure)
                 (const StatResponse *message,
                  void *closure_data);
typedef void (*GetDentsRequest_Closure)
                 (const GetDentsRequest *message,
                  void *closure_data);
typedef void (*GetDentsResponse_Closure)
                 (const GetDentsResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    file_transfer_commands__descriptor;
extern const ProtobufCMessageDescriptor dir_ent__descriptor;
extern const ProtobufCEnumDescriptor    dir_ent__directory_type__descriptor;
extern const ProtobufCMessageDescriptor echo_request__descriptor;
extern const ProtobufCMessageDescriptor echo_response__descriptor;
extern const ProtobufCMessageDescriptor open_request__descriptor;
extern const ProtobufCMessageDescriptor open_response__descriptor;
extern const ProtobufCMessageDescriptor close_request__descriptor;
extern const ProtobufCMessageDescriptor close_response__descriptor;
extern const ProtobufCMessageDescriptor read_request__descriptor;
extern const ProtobufCMessageDescriptor read_response__descriptor;
extern const ProtobufCMessageDescriptor write_request__descriptor;
extern const ProtobufCMessageDescriptor write_response__descriptor;
extern const ProtobufCMessageDescriptor make_directory_request__descriptor;
extern const ProtobufCMessageDescriptor make_directory_response__descriptor;
extern const ProtobufCMessageDescriptor remove_directory_request__descriptor;
extern const ProtobufCMessageDescriptor remove_directory_response__descriptor;
extern const ProtobufCMessageDescriptor unlink_request__descriptor;
extern const ProtobufCMessageDescriptor unlink_response__descriptor;
extern const ProtobufCMessageDescriptor time_spec__descriptor;
extern const ProtobufCMessageDescriptor stat_request__descriptor;
extern const ProtobufCMessageDescriptor stat_response__descriptor;
extern const ProtobufCMessageDescriptor get_dents_request__descriptor;
extern const ProtobufCMessageDescriptor get_dents_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_fileexplorer_2eproto__INCLUDED */
